import random
class NodoLista:
    def __init__(self, dado=0, proximo_nodo=None):
        self.dado = dado
        self.proximo = proximo_nodo
    def __repr__(self):
        return '%s : %s' % (self.dado, self.proximo)
class ListaEncadeada:
    def __init__(self):
        self.head = None
    def __repr__(self):
        return "[" + str(self.head) + "]"
    def mostra(self):
        self.head = self.head.proximo
        if self.head is not None:
            self.mostra()
    def deleta(self,nodo,number,elementoLista):
        if elementoLista == 0:
            if self.head.dado == number:
                self.head = self.head.proximo
            else:
                self.deleta(nodo.proximo,number,elementoLista+1)
        else:
            if nodo.dado == number:
                self.head.proximo = nodo.proximo
            else:
                self.head = self.head.proximo
                self.deleta(nodo.proximo,number,elementoLista+1)

    def inserir(self, valor):
        if self.head.dado == 0 and self.head.proximo is None:
            self.head.dado = valor
        else:
            AuxNodo = NodoLista(valor)
            AuxNodo.proximo = self.head
            self.head = AuxNodo

    def inverte(self):
        NovaLista = ListaEncadeada()
        NovaLista.head = NodoLista(self.head.dado)
        self.head = self.head.proximo
        while True:
            NovaLista.inserir(self.head.dado)
            if self.head.proximo is None:
                break
            else:
                self.head = self.head.proximo
        return NovaLista

    def MaxLista(self,max):
        while True:
            if max < self.head.dado:
                max = self.head.dado
            if self.head.proximo is not None:
                self.head = self.head.proximo
            else:
                break
        return max

    def ordena(self):
        AuxLista = ListaEncadeada()
        AuxLista.head = NodoLista()
        PrimeiroNodo = NodoLista()
        PrimeiroNodo.proximo = self.head
        i = 0
        while True:
            valor = self.MaxLista(0)
            AuxLista.inserir(valor)
            self.head = PrimeiroNodo.proximo
            if self.head.dado == valor:
                PrimeiroNodo.proximo = PrimeiroNodo.proximo.proximo
                self.head = PrimeiroNodo.proximo
            else:
                self.deleta(self.head,valor,0)
                self.head = PrimeiroNodo.proximo
            if self.head.proximo is None:
                AuxLista.inserir(self.head.dado)
                break
        return AuxLista

    def fusion(self,first,second):
        self.head = NodoLista()
        while True:
            if first.head.proximo is not None:
                self.inserir(first.head.dado)
                first.head = first.head.proximo
            else:
                self.inserir(first.head.dado)
                break
        while True:
            if second.head.proximo is not None:
                self.inserir(second.head.dado)
                second.head = second.head.proximo
            else:
                self.inserir(second.head.dado)
                break
        return self

lista_um = ListaEncadeada()
lista_um.head = NodoLista()
lista_dois = ListaEncadeada()
lista_dois.head = NodoLista()
i = 0
while i < 5:
    lista_um.inserir(random.randint(0,100))
    lista_dois.inserir(random.randint(0,100))
    i += 1
lista_um = lista_um.ordena()
lista_dois = lista_dois.ordena()
lista_final = ListaEncadeada.fusion(ListaEncadeada(),lista_um,lista_dois)
lista_final = lista_final.ordena()
print(lista_final)
